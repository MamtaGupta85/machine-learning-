# -*- coding: utf-8 -*-
"""bike_share.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19kIU3eaWyw3lqAIqBp_JylcjpesEc2sE
"""

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, RobustScaler
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.metrics import mean_squared_error, r2_score

#connecting with the drive
from google.colab import drive
drive.mount('/content/drive')

path_bike = '/content/drive/MyDrive/Machine Learning/SeoulBikeData.csv'

df_bike = pd.read_csv(path_bike, encoding='latin1')

df_bike.head()

#check the dimensions of the dataset
df_bike.shape

#describe the data
df_bike.describe().T

#columnar data information
df_bike.info()

"""Exploratory Data Analysis and Preprocessing"""

df_bike.isna().sum()

for cols in (df_bike.columns):
  uni = df_bike.groupby(cols)[cols].count()
  print(f'Value counts for {uni}')
  print('==================================================================')

df_bike['Holiday']=df_bike['Holiday'].replace('Holiday',"Yes")
df_bike['Holiday']=df_bike['Holiday'].replace('No Holiday','No')

df_bike['Holiday'].value_counts()

#@title Univariate Analysis
plt.rcParams['figure.figsize']=(12,6)
def plot_x (x,fig):
  plt.subplot(4,2,fig)
  sns.boxplot(x=df_bike[x])
  plt.title(x+'boxplot')
  plt.xlabel(x)

plt.rcParams['figure.figsize']=(12,20)
plot_x('Rented Bike Count',1)
plot_x('Snowfall',2)
plot_x('Temperature',3)
plot_x('Solar_Radiation',4)
plot_x('Rainfall',5)
plot_x('Visibility',6)

def pie_plot(x,fig):
  plt.subplot(3,2,fig)
  df_bike[x].value_counts().plot.pie(autopct='%1.f%%')
  plt.title(x+' pie-chart')

  plt.subplot(3,2,fig+1)
  df_bike[x].value_counts().plot(kind='bar', color='y')
  plt.title(x+' countplot')
  plt.xlabel(x)

plt.rcParams['figure.figsize']=(12,20)
pie_plot('Seasons',1)
pie_plot('Holiday',3)
pie_plot('Functioning_Day',5)

#@title Multivariate Analysis
x= df_bike.dtypes!=object
num_features = df_bike.columns[x].tolist()
plt.rcParams['figure.figsize']=(12,6)
sns.heatmap(df_bike[num_features].corr(), annot=True, linecolor='red', cmap='magma')

sns.pairplot(df_bike)

vif_data = pd.DataFrame()
X = df_bike[num_features]
vif_data['Features']= X.columns
vif_data['VIF']=[variance_inflation_factor(X.values,i) for i in range(len(X.columns))]

vif_data

#dropping the columns
df_bike.drop(columns=['Dew_point_temperature', 'Date',], inplace=True, axis=1)

#classify the categorical data
cat_data = df_bike.dtypes==object
cat_features = df_bike.columns[cat_data].tolist()

cat_features

#classify the numerical data
x1= df_bike.dtypes!=object
num_features1 = df_bike.columns[x1].tolist()

num_features1

df_cat = pd.get_dummies(df_bike[cat_features])

rs = RobustScaler()
df_bike[num_features1]= rs.fit_transform(df_bike[num_features1])

df_cont= df_bike[num_features1]

df_bike1 = pd.concat([df_cat, df_cont], axis=1)

df_bike1.head()

df_bike1.info()

#splitting the input and output
df_bike2 = df_bike1.drop(columns=['Rented Bike Count'], axis=1)
input = df_bike2.values
output = df_bike1['Rented Bike Count']

#training and testing the data
train_x, test_x, train_y, test_y = train_test_split(input, output, test_size=0.2)

#Linear Regression model
lr_bike = LinearRegression()
lr_bike.fit(train_x,train_y)

y_pred = lr_bike.predict(test_x)

#evaluating the performance of the model
print(f'the mean squared error of model is {mean_squared_error(test_y, y_pred)}')

print(f'the r2 score of the model is {r2_score(test_y, y_pred)}')

def pred_bike_demand(Seasons,Holiday,Functioning_Day,Hour,Temperature,Humidity,
                     Wind_speed,Visibility,Solar_Radiation,Rainfall,Snowfall, df, lr_bike):
  Seasons_index = np.where(df.columns=='Seasons_'+Seasons)[0][0]
  Holiday_index = np.where(df.columns=='Holiday_'+Holiday)[0][0]
  Functioning_Day_index = np.where(df.columns=='Functioning_Day_'+Functioning_Day)[0][0]

  x= np.zeros(len(df.columns))

  x[8]=Hour
  x[9]=Temperature
  x[10]=Humidity
  x[11]=Wind_speed
  x[12]=Visibility
  x[13]=Solar_Radiation
  x[14]=Rainfall
  x[15]=Snowfall

  if Seasons_index>=0:
    x[Seasons_index]=1
  if Holiday_index>=0:
    x[Holiday_index]=1
  if Functioning_Day_index>=0:
    x[Functioning_Day_index]=1
  print('transformed x',x)
  return lr_bike.predict([x])

pred_demand = pred_bike_demand('Winter','No','Yes',4,20,10,2,1167,3.42,0,0,df_bike2,lr_bike)

print('the predicted bike share demand is ', pred_demand)